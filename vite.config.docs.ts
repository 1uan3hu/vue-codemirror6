import { checker } from 'vite-plugin-checker';
import { defineConfig, type UserConfig } from 'vite';
import Vue from '@vitejs/plugin-vue';

import { fileURLToPath, URL } from 'node:url';
import fs from 'node:fs';

const pkg = require('./package.json');

// https://vitejs.dev/config/
export default defineConfig(async ({ mode, command }): Promise<UserConfig> => {
  const config: UserConfig = {
    // https://vitejs.dev/config/shared-options.html#base
    base: './',
    // Resolver
    resolve: {
      // https://vitejs.dev/config/shared-options.html#resolve-alias
      alias: {
        '@': fileURLToPath(new URL('./src', import.meta.url)),
        // for DEMO
        'vue-codemirror6': fileURLToPath(new URL('./src', import.meta.url)),
      },
    },
    // https://vitejs.dev/config/#server-options
    server: {
      fs: {
        // Allow serving files from one level up to the project root
        allow: ['..'],
      },
    },
    plugins: [
      Vue(),
      // vite-plugin-checker
      // https://github.com/fi3ework/vite-plugin-checker
      checker({
        typescript: true,
        vueTsc: true,
        eslint: {
          lintCommand:
            'eslint --cache --cache-location ./node_modules/.vite/vite-plugin-eslint',
        },
      }),
    ],
    // Build Options
    // https://vitejs.dev/config/#build-options
    build: {
      outDir: 'docs',
      rollupOptions: {
        output: {
          manualChunks: {
            vue: ['vue'],
            codemirror: [
              'codemirror',
              '@codemirror/autocomplete',
              '@codemirror/commands',
              '@codemirror/language',
              '@codemirror/lint',
              '@codemirror/search',
              '@codemirror/state',
              '@codemirror/view',
              // Add the following as needed.
              '@codemirror/lang-html',
              '@codemirror/lang-json',
              '@codemirror/lang-javascript',
              '@codemirror/lang-markdown',
            ],
            eslint: ['eslint-linter-browserify'],
          },
        },
      },
      // Minify option
      target: 'esnext',
      minify: 'esbuild',
    },
    esbuild: {
      // drop: command === 'serve' ? [] : ['console'],
    },
  };

  // Write meta data.
  fs.writeFileSync(
    fileURLToPath(new URL('./src/Meta.ts', import.meta.url)),
    `import type MetaInterface from '@/interfaces/MetaInterface';

// This file is auto-generated by the build system.
const meta: MetaInterface = {
  version: '${pkg.version}',
  date: '${new Date().toISOString()}',
};
export default meta;
`
  );

  // copy markdown-wasm
  fs.copyFileSync(
    fileURLToPath(
      new URL(
        './node_modules/markdown-wasm/dist/markdown.wasm',
        import.meta.url
      )
    ),
    fileURLToPath(new URL('./public/markdown.wasm', import.meta.url))
  );

  // Export vite config
  return config;
});
